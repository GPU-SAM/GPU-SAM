This is modified library (GPUSparc)
GPUSparc: nGPU = 2
__kernel
void matrixMultiplication(__global float* A, __global float* B, __global float* C,  int widthA, int widthB ,unsigned int GPUSPARC_GLOBAL_SIZE0,unsigned int GPUSPARC_GLOBAL_SIZE1,unsigned int GPUSPARC_GLOBAL_SIZE2,unsigned int GPUSPARC_GROUP_OFFSET0,unsigned int GPUSPARC_GROUP_OFFSET1,unsigned int GPUSPARC_GROUP_OFFSET2,unsigned int GPUSPARC_NUM_GROUPS0,unsigned int GPUSPARC_NUM_GROUPS1,unsigned int GPUSPARC_NUM_GROUPS2)
{
	int i = (get_global_id(0)+get_local_size(0)*GPUSPARC_GROUP_OFFSET0);
	int j = (get_global_id(1)+get_local_size(1)*GPUSPARC_GROUP_OFFSET1);
	float value=0;


 if (j < widthB && i < widthA)
 {
	for ( int k = 0; k < widthA; k++)
	{
		value += A[k + j * widthA] * B[k*widthB + i];
	}
	C[i + widthA * j] = value;
 }
}



Write: 0.011996
Write: 0.011593
Write: 0.000379
Write: 0.000052
Arg Sync
Synchronizer: 0.011477
kernel time: 0.132074
Read time: 0.014304
Merge time: 0.023286
This is modified library (GPUSparc)
GPUSparc: nGPU = 2
__kernel
void matrixMultiplication(__global float* A, __global float* B, __global float* C,  int widthA, int heightA, int widthB,unsigned int GPUSPARC_GLOBAL_SIZE0,unsigned int GPUSPARC_GLOBAL_SIZE1,unsigned int GPUSPARC_GLOBAL_SIZE2,unsigned int GPUSPARC_GROUP_OFFSET0,unsigned int GPUSPARC_GROUP_OFFSET1,unsigned int GPUSPARC_GROUP_OFFSET2,unsigned int GPUSPARC_NUM_GROUPS0,unsigned int GPUSPARC_NUM_GROUPS1,unsigned int GPUSPARC_NUM_GROUPS2)
{
	int i = (get_global_id(0)+get_local_size(0)*GPUSPARC_GROUP_OFFSET0);
	int j = (get_global_id(1)+get_local_size(1)*GPUSPARC_GROUP_OFFSET1);
	float value=0;


 if (j < heightA && i < widthB)
 {
	for ( int k = 0; k < widthA; k++)
	{
		value += A[k + j * widthA] * B[k*widthB + i];
	}
	C[i + widthB * j] = value;
 }
}



Write: 0.000550
Write: 0.000282
Arg Sync
Synchronizer: 0.000263
kernel time: 0.000458
Read time: 0.000270
Merge time: 0.000231
This is modified library (GPUSparc)
GPUSparc: nGPU = 2
__kernel
void matrixMultiplication(__global float* A, __global float* B, __global float* C,  int widthA, int heightA, int widthB,unsigned int GPUSPARC_GLOBAL_SIZE0,unsigned int GPUSPARC_GLOBAL_SIZE1,unsigned int GPUSPARC_GLOBAL_SIZE2,unsigned int GPUSPARC_GROUP_OFFSET0,unsigned int GPUSPARC_GROUP_OFFSET1,unsigned int GPUSPARC_GROUP_OFFSET2,unsigned int GPUSPARC_NUM_GROUPS0,unsigned int GPUSPARC_NUM_GROUPS1,unsigned int GPUSPARC_NUM_GROUPS2)
{
	int i = (get_global_id(0)+get_local_size(0)*GPUSPARC_GROUP_OFFSET0);
	int j = (get_global_id(1)+get_local_size(1)*GPUSPARC_GROUP_OFFSET1);
	float value=0;


 if (j < heightA && i < widthB)
 {
	for ( int k = 0; k < widthA; k++)
	{
		value += A[k + j * widthA] * B[k*widthB + i];
	}
	C[i + widthB * j] = value;
 }
}



Write: 0.001324
Write: 0.001253
Arg Sync
Synchronizer: 0.001128
kernel time: 0.002107
Read time: 0.001641
Merge time: 0.000942
This is modified library (GPUSparc)
GPUSparc: nGPU = 2
__kernel
void matrixMultiplication(__global float* A, __global float* B, __global float* C,  int widthA, int heightA, int widthB,unsigned int GPUSPARC_GLOBAL_SIZE0,unsigned int GPUSPARC_GLOBAL_SIZE1,unsigned int GPUSPARC_GLOBAL_SIZE2,unsigned int GPUSPARC_GROUP_OFFSET0,unsigned int GPUSPARC_GROUP_OFFSET1,unsigned int GPUSPARC_GROUP_OFFSET2,unsigned int GPUSPARC_NUM_GROUPS0,unsigned int GPUSPARC_NUM_GROUPS1,unsigned int GPUSPARC_NUM_GROUPS2)
{
	int i = (get_global_id(0)+get_local_size(0)*GPUSPARC_GROUP_OFFSET0);
	int j = (get_global_id(1)+get_local_size(1)*GPUSPARC_GROUP_OFFSET1);
	float value=0;


 if (j < heightA && i < widthB)
 {
	for ( int k = 0; k < widthA; k++)
	{
		value += A[k + j * widthA] * B[k*widthB + i];
	}
	C[i + widthB * j] = value;
 }
}



Write: 0.003232
Write: 0.003116
Arg Sync
Synchronizer: 0.003060
kernel time: 0.016468
Read time: 0.003520
Merge time: 0.002306
This is modified library (GPUSparc)
GPUSparc: nGPU = 2
__kernel
void matrixMultiplication(__global float* A, __global float* B, __global float* C,  int widthA, int heightA, int widthB,unsigned int GPUSPARC_GLOBAL_SIZE0,unsigned int GPUSPARC_GLOBAL_SIZE1,unsigned int GPUSPARC_GLOBAL_SIZE2,unsigned int GPUSPARC_GROUP_OFFSET0,unsigned int GPUSPARC_GROUP_OFFSET1,unsigned int GPUSPARC_GROUP_OFFSET2,unsigned int GPUSPARC_NUM_GROUPS0,unsigned int GPUSPARC_NUM_GROUPS1,unsigned int GPUSPARC_NUM_GROUPS2)
{
	int i = (get_global_id(0)+get_local_size(0)*GPUSPARC_GROUP_OFFSET0);
	int j = (get_global_id(1)+get_local_size(1)*GPUSPARC_GROUP_OFFSET1);
	float value=0;


 if (j < heightA && i < widthB)
 {
	for ( int k = 0; k < widthA; k++)
	{
		value += A[k + j * widthA] * B[k*widthB + i];
	}
	C[i + widthB * j] = value;
 }
}



Write: 0.011471
Write: 0.011296
Arg Sync
Synchronizer: 0.011252
kernel time: 0.125681
Read time: 0.011691
Merge time: 0.009272
